Game of life specs:

Process:
A. Print the intial state as a string
B. Checks how many alive neighbors are there for each cells
C. Apply rule and change status of all cell at same time.
D. Go back to step A

STEP B:
Neighbours of cell(i,j):
| i-1, j-1 | i-1, j | i-1, j+1 |
| i  , j-1 | i  , j | i  , j+1 |
| i+1, j-1 | i+1, j | i+1, j+1 |

within bounds:
Given i and j, neighbour shouldn't have negative index or index greater than size of matrix

STEP C:
Rules:
1. Any live cell with fewer than two live neighbors dies, as if by underpopulation.
2. Any live cell with two or three live neighbors lives on to the next generation.
3. Any live cell with more than three live neighbors dies, as if by overpopulation.
4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. 

| Rule | status | neighbors | action |
|    1 | True   | <2        | False  |
|    2 | True   | 2,3       | True   |
|    3 | True   | 3<        | False  |
|    4 | False  | 3         | True   |





RLE support spec:

A. RLE_to_string	 : Changes RLE format to readable string with True and False
B. string_to_matrix	 : Changes string to matrix with Boolean values
C. expand_matrix	 : RLE files are designed to work in infinite grid. To make it compatible we expands the matrix
D. f_mtrx		 : Dead cells at the end of a RLE pattern line do not need to be encoded, so it has to be filled False

RLE:
 rle ="2o2b$o3b$3bo$2b2o!"
 x,y = 4,4
 In the given RLE format,
    b - dead cell
    o - alive cell
    $ - next line
    ! - end of line
    x - width of pattern
    y - height of pattern
    
